workbench launcher painting splash screen application starts splash screen process main thread eclipse enable splash screen periodically paint display application starting event loop starts running startup framework handles painting splash screen startup application started created attachment patch break workbench init thread patch punts workbench initialization thread periodic sync execs startup code requires access includes startup threading class startup access occur synchronizer defer startup threading access startup occurred wrappering callouts startup threading calls includes calls create executable extensions user code created thread eyes scares pants painting splash isn smooth ways isolate work thread add scares pants column main concerns breaking pretty fundamental contract implementation synchronizer sync exec spec sync exec thread calls method suspended runnable completes won true startup caller sync exec relies side runnable sync exec returns fail admittedly fuzzy concern wad code thread moving thread code paths attempt accessing code thread safe unthread safe bits accessed thread time lead failures thread local caches suspect trial error bulk expensive work called scope startup threading calls defeat purpose guess alternative leave sprinkle expensive parts startup event loop blocks spin loop defined period event loop progress monitor assuming reasonable answers minor notes implementation potential null reference sychronizer started workbench synchronize variable null avoid deadlock false topic idea support deadlock command argument catching arbitrary throwable startup threading caching field dangerous passing checked exceptions propagating error thread death thread good properly handling virtual machine error disastrous startup threading behave display sync exec regard failure occur thread propagating brittle cache field hope caller exception editor manager restore stick multi status log ride startup threading throwable general reason dangerous treat throwables generic personally find startup thread exceptions confusing suggests won exceptions call plain code synchronizer thread safe array list synchronized read write starting sync block ensure stale isn read provide detailed response tomorrow good nights sleep belt mmm queuing runnables startup runnables examine calling thread block thread startup thread thread declared startup thread pants fear fully mapping startup routine guaranteeing caught cases depressing task initial cut inserted event loop spin code places thought looked expensive foolish task finding sweet spots hunting places legitimately needed access thread isolating specific concerns noticed avoid deadlock putting patch wondered needed don answer question methuselah sychnronizer synchronization whoops yah rationale earlier wasn needed calls sync async exec thread started sense adding tod szymone comments catching handling exceptions deadlock synchronizer late release wanted turn drastically wrong basis punting hand adding scary turn nice safeguard created attachment patch patch blocks sync exec calls handles applicability thread tagging special runnable startup runnable removing week favor vanilla display calls safe runnables reviewed patch boris committed code modified move thread local variable synchronizer workbench people grab nightly build tonight crazy lord verified bugs appeared error handling corner cases addressed
 