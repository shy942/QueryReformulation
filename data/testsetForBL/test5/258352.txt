progress synchronization progress manager expensive created attachment proposed patch build performance analyst adopting product analysis forthcoming release based eclipse observed lot stress listeners key lock class org eclipse internal progress progress manager builds medium sized workload turns synchronization rarely needed array protects rarely remove steady synchronization costs synchronize array altered add listener remove listener temporary arrays flip switch altering array temporary array references iterating array unprotected array built change unprotected iterations safe long local references array attached patch accomplishes catch change listener progress view updater called frequently scheduling update job times import build medium sized workload puts strain job manager locks bug patch includes small progress view updater doesn call schedule patch update job scheduled times import build workload created attachment patch listener list randall basically listener list class apply patch check solves problem paul bug raised time push bugs target notice patch doesn include schedule delay oversight reason include portion original patch https bugs eclipse org bugs attachment cgi action diff eclipse org eclipse internal progress progress view updater java fine implementation listener list min mentioned dropped changed progress view updater limits number schedule calls reason reply comment fine implementation listener list min mentioned dropped changed progress view updater limits number schedule calls reason wanted listner list stuff works didn break tests wanted performance adding change reply comment fine implementation listener list min mentioned dropped changed progress view updater limits number schedule calls reason small test schedule long start system current time millis int job schedule long system current time millis system println time start times average scheduling job times takes optimize chiming uncontended synchronization java fast books read basically free contended synchronization slow slower number simultaneous requests workload randall working auto build validation running jobs puts lot strain progress manager schedule jobs test single thread chance contention created threads threads calling schedule job slower contention additionally core processor experience worst forms contention recommend avoiding job manager tight loops calls fast thread lock contention system lot load lot threads jobs requests spread threads cost contention spikes investigated consistently locks jobs infrastructure removal completely unnecessary grabbing locks good vote optimize optimizing updates occur human consume general resource allocation created attachment patch patch listener list sync delay reply comment created attachment details patch released verified introduced race condition bug progress viewer opened bug
 