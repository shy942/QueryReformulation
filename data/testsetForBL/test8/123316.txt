undo place undone redone redo undo history operation performs successful undo redo converse longer valid typically error condition undone operation realizes redone redone undone error path code bug default operation history determines case disposes operation prevent leak notified operation longer history operation redone undone listeners receive notification redo successful successful redo reported returned status object operation disposed history undo history issue email discussions linda damus case running problem potential hole notification framework side hole linear undo model supported operation history action handler workaround listen successful operation question redone undone linda correctly adopt workaround listener notified operation operation history dispose operation subsequently undone disposed operation discarded decide converse operation performed check operation disposed disposed method undoable operation leads conclude nice specific listener notification status code fired cases operation executed undone operation undone redone operation redone undone history listener operation history action handler flush history pruning notifications received investigate issue simple implement introducing worms initial request bug check validity converse operations operatios stack invalid led bug bug invalid operation stack flushed naturally action handlers adding extra notifications dirk awhile opinion adding notifications letting invalid operation stack net result action handlers flushing history remember led request behavior bug marking issue scenarios operation executed undone operation undone redone operation redone undone operation history decision operation undo redo history making implicit assumption undo model linear effectively bypasses linear undo redo model implemented operation history action handlers operations recorded history action handlers disabled pruning flush history context consistency action handlers disabled history flushed context pruning scenarios happen undo redo context history longer undone redone martin read bug comment discussion agree linda comments comment wrong implement bug default operation history assume undo redo strictly linear clients history operation approvers enforce rules history preference case change default operation history prevalidate operations placing undo redo history stands result action handlers determining topmost operation invalid flushing stack net result enforced clients framework propose change correctness simplification code prevent adding deal hole notification note haven compelling case broken incorrectness felt refactoring risk change postpone dealing problem confident test suites implementation refactoring suites test scenarios originally ing randy discussion interest comment execute operation undone sit stack indicating wrong proposed considered default operation history execute operation executes operation determines operation undone operation undo history disposed request bug approach problem disposed fails guessing based comment don approach disliking proposed default operation history execute operation places undo history checking clients check status topmost operation purge history desired case operation history action handlers history purged pruning true left pruning false basically proposing validation performed successful execute undo redo clients topmost candidate valid handle purging case multiple contexts history top bottom parens contexts undone undone purge incorrectly undo history purged context suppose undone action handler manipulating context determines disposes history operation multiple contexts contexts disposed context removed operation holds refactoring text scenarios proposed change area executing redoing check undone redone moving history place clients case action handlers pruning context worry suppose undone action handler manipulating context determines disposes history elaborated problem wrong undo isn point returning context throw proceed undo undo undo context context confusing ignoring fact undone client calls undo undone prior susan late response refactoring point view add reverse operation undo stack isn valid user execute operation perform reason asked bug wasn aware fact invalid operations removed stack automatically work wasn implemented point time refactoring undo stack strictly liniar decided implementation push stack place tests execute org eclipse jdt tests refactoring refactoring tests executes refactoring tests tests test undo behaviour refactoring dirk agree didn picture defined purging works operation history action handler configured prune context watching action handlers listening history notifications order update enablement command string configured prune history flush context determine topmost operation valid client decision framework place don operation history decisions area pursue change refactoring tests manual scenarios tested good good change method signature change change behavior spec randy elaborated problem wrong undo isn point returning context throw proceed undo remember framework agnostic undo models assume linear model necesarily wrong undo enforce rule install policy operation approver workbench linear undo model assumed user undo warned newer context instructed undone concrete refactoring operation user subsequently edited files user undo local edit refactoring cancel linear undo violation detector randy concrete scenarios flush context remove operations multiple contexts works nicely suppose represents undo context source file workbench context editor closed flushes history context context removed refactoring operation sense undo file closed remember framework agnostic undo models assume linear model haven forgotten don relevance assume linear undo desirable client operation history approver history determine undone fact purged history refactoring field rename invoked class accesses field defining class local insertion character field defining class undone undone purged purged scenario comment sense undo refactoring correctly prohibits case digressing sounds agreeing operation history shouldn decide history invalid point time pursue behavior change test suites hold release side discussion validate refactoring resources change reason operation history field rename case closed editor class defining field saving correctly flushed undo save change close editor correctly flushed undo refactoring validation catches fact field updated refactor validity orthogonal flushing context problem open bug track issue separately original request flush flushing operation contexts involve agressively intersecting operation supported linear undo fixed inconsistencies contracted behavior fixed earlier clients incorrect behavior javadoc operation history updated explain change behavior renaming bug reflect ended manual undo text refactoring scenarios refactoring tests passed face text undo tests passed sigh meant mark fixed verified win undo tests passed operations test test test test behavior change pass
 