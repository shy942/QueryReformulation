90073.txt: viewers abstract tree viewer add method slow elements implementing deferred loading tree viewer stumbled performance problems abstract tree viewer add object parent element object child elements method amount time method takes grows exponentially size child elements array profiling turns problem method optimized loading multiple elements essentially adds element separately main problem items item method called times element child elements array method sends message native windows control children item time takes items execute grows exponentially item control performance native widgets optimize calls created optimized tree viewer class overrides internal add method single call items load children difference performance huge add items original tree implementation takes optimized class dimitry fayerman copyright wyeth rights reserved package wyeth clinical rcp common import java util arrays import java util comparator import java util hash map import java util map import org eclipse jface viewers tree viewer import org eclipse jface viewers viewer sorter import org eclipse swt widgets composite import org eclipse swt widgets control import org eclipse swt widgets item import org eclipse swt widgets tree import org eclipse swt widgets widget tree viewer descendant optimizes loading multiple child elements tree node method code add object parent element object child elements code method called deferred content provider load child elements asynchronosely class optimized method times faster author dimitry fayerman version revision modified author dfayerma public class optimized tree viewer extends tree viewer static attributes static methods static classes attributes object match newly child elements existing elements match refresh existing nodes needed compitable current tree viewer implementation performance overhead default option disabled enabled calling code set support multiple equal elements code method private boolean support multiple equal elements false constructors creates tree viewer newly created tree control parent tree control created style bits code code code code viewer input content provider default label provider sorter filters param parent parent control public optimized tree viewer composite parent super parent creates tree viewer newly created tree control parent tree control created style bits viewer input content provider default label provider sorter filters param parent parent control param style style bits create tree public optimized tree viewer composite parent int style super parent style creates tree viewer tree control viewer input content provider default label provider sorter filters param tree tree control public optimized tree viewer tree tree super tree methods object match newly child elements existing elements match refresh existing nodes needed compitable current tree viewer implementation performance overhead default option disabled enabled calling code set support multiple equal elements code method return code true code multiple equal elements examined add method public boolean supporting multiple equal elements return support multiple equal elements sets flag indicating object match newly child elements existing elements match refresh existing nodes needed compitable current tree viewer implementation performance overhead default option disabled enabled calling code set support multiple equal elements code method param attribute public void set support multiple equal elements boolean support multiple equal elements add multiple child elements parent element method optimized reducing number costly calls items item method original implementation items called times element implementation perfroms call items item param widget tree parent item add children param parent element parent domain object param child elements array domain objects add parent protected void internal add widget widget object parent element object child elements control tree control child elements length object filtered filter child elements item items children widget support multiple equal elements filtered refresh matching elements widget items filtered create elements widget items filtered refreshes items correspond elements additions array returns array additions match elements existing items param parent parent tree item param items array existing child items parent param additions array objects add return array unique objects addition attribute match elements items items array private object refresh matching elements widget parent item items object additions add additions hash map faster lookup ensure uniqueness map additions map hash map additions length int additions length additions map additions additions additions map remove parent data elements match element existing items refresh item skip adding element int items length object match additions map remove items data match null refresh element case children refresh match additions map size additions length remove return original array return additions preserve order drive original array object result object additions map size int additions length additions map key additions result additions return result create elements parent widget param widget parent tree item param items array existing child items param elements elements add private void create elements widget widget item items object elements final viewer sorter sorter sorter sorter sort elements add calling element worry elements sorter null arrays sort elements comparator public int compare object object return sorter compare optimized tree viewer int position int elements length object element elements position element items position element create tree item widget element position returns item inserted sorter determine correct position sorter assigned returns element param items existing items param start start start search position optimising search multiple elements sorted themself param element element find position return inserting element protected int element item items int start object element viewer sorter sorter sorter sorter null return items length int count items length int min start max count min max int mid min max object data items mid data int compare sorter compare data element compare find item element compare mid mid count break data items mid data compare sorter compare data element return mid compare min mid max mid return min classes
